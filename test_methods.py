import asyncio
import os
import time
from typing import List, Dict, Tuple, Optional

# Dodaj katalog g≈Ç√≥wny do path
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.services.semantic_clustering import SemanticClusteringService
from supabase import create_client, Client as SupabaseClient

# Wczytaj zmienne ≈õrodowiskowe
from dotenv import load_dotenv
load_dotenv()

# Ustawienia
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# W≈ÇƒÖcz Super Simple Clustering
os.environ["USE_SUPER_SIMPLE_CLUSTERING"] = "true"
os.environ["USE_UNIVERSAL_CLUSTERING"] = "false"

# Dane testowe - soczewki kontaktowe
TEST_PHRASES = [
    "soczewki kontaktowe",
    "soczewki jednodniowe",
    "soczewki miesiƒôczne",
    "soczewki roczne",
    "soczewki toryczne",
    "soczewki progresywne",
    "soczewki kolorowe",
    "soczewki na astygmatyzm",
    "acuvue soczewki",
    "biofinity soczewki",
    "dailies soczewki",
    "vision express soczewki",
    "kodano soczewki",
    "family optic soczewki",
    "jak za≈Ço≈ºyƒá soczewki",
    "jak wyjƒÖƒá soczewki",
    "co to sƒÖ soczewki",
    "soczewki do oczu",
    "ile kosztujƒÖ soczewki",
    "tanie soczewki",
    "soczewki cena",
    "najlepsze soczewki",
    "gdzie kupiƒá soczewki",
    "soczewki w aptece",
    "soczewki online",
    "soczewki z filtrem uv",
    "soczewki dla dzieci",
    "soczewki po czterdziestce",
    "soczewki silikon hydrogel",
    "soczewki multifokalne",
    "soczewki jednorazowe",
    "soczewki miƒôkkie",
    "soczewki twarde",
    "soczewki kontaktowe opinie",
    "soczewki na receptƒô",
    "soczewki bez recepty",
    "soczewki do komputera",
    "soczewki na noc",
    "soczewki ortho-k",
    "soczewki na dobre widzenie",
    "soczewki na kr√≥tkowzroczno≈õƒá",
    "soczewki na dalekowzroczno≈õƒá",
    "soczewki na zaƒámƒô",
    "soczewki po operacji",
    "soczewki johnson & johnson",
    "soczewki cooper vision",
    "soczewki alcon",
    "soczewki bausch & lomb",
    "soczewki menicon",
    "soczewki air optix",
    "soczewki proclear",
    "soczewki moist",
    "soczewki ultra",
    "soczewki plus",
    "soczewki oasys",
    "soczewki trueye",
    "soczewki define",
    "soczewki natural",
    "soczewki comfort",
    "soczewki focus",
    "soczewki soflens",
    "soczewki purevision",
    "soczewki clear",
    "soczewki total",
    "soczewki 1 day",
    "soczewki 2 week",
    "soczewki 30 dni",
    "soczewki 90 dni",
    "soczewki 365 dni",
    "soczewki do p≈Çywania",
    "soczewki do sportu",
    "soczewki do makija≈ºu",
    "soczewki do pracy",
    "soczewki do czytania",
    "soczewki do jazdy",
    "soczewki do teatru",
    "soczewki do kina",
    "soczewki do ta≈Ñca",
    "soczewki do biegania",
    "soczewki do fitnessu",
    "soczewki do tenisa",
    "soczewki do golfa",
    "soczewki do ≈ºeglarstwa",
    "soczewki do narciarstwa",
    "soczewki do paintball",
    "soczewki do airsoft",
    "soczewki do fotografii",
    "soczewki do modelingu",
    "soczewki do cosplay",
    "soczewki do halloweenu",
    "soczewki do karnawa≈Çu",
    "soczewki do imprez",
    "soczewki do sesji",
    "soczewki do ≈õlubu",
    "soczewki do studni√≥wki",
    "soczewki do walentynek",
    "soczewki do randki",
    "soczewki do pracy biurowej",
    "soczewki do komputera niebieskie",
    "soczewki anti blue light",
    "soczewki z filtrem ≈õwiat≈Ça",
    "soczewki hybrydowe",
    "soczewki skleralne",
    "soczewki orthokeratologiczne",
    "soczewki na noc ortho k",
    "soczewki dream lite",
    "soczewki kontaktowe warszawa",
    "soczewki kontaktowe krak√≥w",
    "soczewki kontaktowe gda≈Ñsk",
    "soczewki kontaktowe pozna≈Ñ",
    "soczewki kontaktowe wroc≈Çaw",
    "soczewki kontaktowe ≈Ç√≥d≈∫",
    "soczewki kontaktowe szczecin",
    "soczewki kontaktowe lublin",
    "soczewki kontaktowe katowice",
    "soczewki kontaktowe bydgoszcz",
    "soczewki kontaktowe toru≈Ñ",
    "soczewki kontaktowe rzesz√≥w",
    "soczewki kontaktowe opole",
    "soczewki kontaktowe kielce",
    "soczewki kontaktowe olsztyn",
    "soczewki kontaktowe bia≈Çystok",
    "soczewki kontaktowe gorz√≥w",
    "soczewki kontaktowe zielona g√≥ra",
    "soczewki kontaktowe p≈Çock",
    "soczewki kontaktowe radom",
    "soczewki kontaktowe tarn√≥w",
    "soczewki kontaktowe rybnik",
    "soczewki kontaktowe sosnowiec",
    "soczewki kontaktowe gliwice",
    "soczewki kontaktowe zabrze",
    "soczewki kontaktowe tychy",
    "soczewki kontaktowe dƒÖbrowa g√≥rnicza",
    "soczewki kontaktowe czƒôstochowa",
    "soczewki kontaktowe jaworzno",
    "soczewki kontaktowe mys≈Çowice",
    "soczewki kontaktowe siemianowice ≈õlƒÖskie",
    "soczewki kontaktowe piekary ≈õlƒÖskie",
    "soczewki kontaktowe ≈õwiƒôtoch≈Çowice",
    "soczewki kontaktowe chorz√≥w",
    "soczewki kontaktowe bƒôdzin",
    "soczewki kontaktowe czelad≈∫",
    "soczewki kontaktowe s≈Çawk√≥w"
]

async def test_super_simple_clustering():
    print("=" * 70)
    print("üöÄ **TEST SUPER SIMPLE CLUSTERING**")
    print("=" * 70)
    
    # Utw√≥rz klienta Supabase
    supabase: SupabaseClient = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Utw√≥rz serwis
    service = SemanticClusteringService(supabase)
    
    # Testuj flagi
    use_super_simple = os.getenv("USE_SUPER_SIMPLE_CLUSTERING", "false").lower() == "true"
    use_universal = os.getenv("USE_UNIVERSAL_CLUSTERING", "false").lower() == "true"
    
    print(f"üîß **KONFIGURACJA:**")
    print(f"   - USE_SUPER_SIMPLE_CLUSTERING: {use_super_simple}")
    print(f"   - USE_UNIVERSAL_CLUSTERING: {use_universal}")
    print(f"   - Liczba testowych fraz: {len(TEST_PHRASES)}")
    
    # Symuluj dane
    service.all_phrases = [{"text": phrase} for phrase in TEST_PHRASES]
    service._current_seed_keyword = "soczewki kontaktowe"
    
    # Stw√≥rz fake embeddings
    import numpy as np
    embeddings = np.random.random((len(TEST_PHRASES), 1536))
    
    print("\nüß™ **URUCHAMIANIE TESTU...**")
    
    start_time = time.time()
    
    try:
        # Wywo≈Çaj clustering
        cluster_labels, quality_metrics = await service._perform_clustering(embeddings)
        
        duration = time.time() - start_time
        
        print(f"\n‚úÖ **WYNIKI:**")
        print(f"   - Czas przetwarzania: {duration:.2f}s")
        print(f"   - Metoda: {quality_metrics.get('method', 'unknown')}")
        print(f"   - Liczba grup: {quality_metrics.get('num_clusters', 0)}")
        print(f"   - Outliers: {quality_metrics.get('noise_ratio', 0):.1%}")
        print(f"   - Seed keyword: {quality_metrics.get('seed_keyword', 'unknown')}")
        
        # Sprawd≈∫ czy to naprawdƒô Super Simple
        expected_method = "super_simple_clustering"
        actual_method = quality_metrics.get('method', 'unknown')
        
        if actual_method == expected_method:
            print(f"üéØ **SUKCES!** U≈ºywa Super Simple Clustering")
        else:
            print(f"‚ö†Ô∏è  **UWAGA!** Oczekiwano {expected_method}, otrzymano {actual_method}")
        
        # Sprawd≈∫ jako≈õƒá
        num_groups = quality_metrics.get('num_clusters', 0)
        outlier_ratio = quality_metrics.get('noise_ratio', 0)
        
        if 6 <= num_groups <= 12:
            print(f"‚úÖ Liczba grup OK: {num_groups} (cel: 6-12)")
        else:
            print(f"‚ùå Liczba grup NOK: {num_groups} (cel: 6-12)")
        
        if outlier_ratio <= 0.15:
            print(f"‚úÖ Outliers OK: {outlier_ratio:.1%} (cel: ‚â§15%)")
        else:
            print(f"‚ùå Outliers NOK: {outlier_ratio:.1%} (cel: ‚â§15%)")
            
    except Exception as e:
        print(f"‚ùå **B≈ÅƒÑD:** {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_super_simple_clustering()) 